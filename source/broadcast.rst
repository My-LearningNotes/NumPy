广播机制
========

两个数组进行数值运算时(比如加法, 点乘), **在数学上**, 要求它们的shape是相同的. 

Example:

.. code-block:: python
    :emphasize-lines: 10, 13

    >>> import numpy as np
    >>> a = np.array([[1, 2, 3], [4, 5, 6]])
    >>> b = np.array([[10, 20, 30], [40, 50, 60]])
    >>> a
    array([[1, 2, 3],
           [4, 5, 6]])
    >>> b
    array([[10, 20, 30],
           [40, 50, 60]])
    >>> a + b
    array([[11, 22, 33],
           [44, 55, 66]])
    >>> a * b
    array([[ 10,  40,  90],
           [160, 250, 360]])


在NumPy中, 不同shape的数组, 只要满足一定的条件, 也可以进行数值运算, 这就是NumPy的广播机制.

广播(Broadcast)是NumPy对不同shape的数组进行数值计算的方式.

广播的规则:

    * 让所有输入数组都向其中形状最长的数组看齐, 形状中不足的部分都通过在前面加1补齐;
    * 输出数组的形状是输入数组形状的各个维度的最大值;
    * 如果输入数组的某个某个维度和输出数组的对应维度的长度相同或者其长度为1时, 这个数组能够用来计算, 否则出错;
    * 当输入数组的某个维度的长度为1时, 沿着此维度运算时都用此维度上的第一组值.


简单来说, 可以这么理解:

    * **在所有的输入数组中, 取各个维度的最大值, 构建输出数组的shape;**
    * **各个输入数组, 按照输出数组的shape去扩展自己, 将自己的各个维度和输出数组比较:**

        * **要么维度的长度和输出数组一致;**
        * **要么维度的长度为1, 则扩展该维度, 该维度上的所有元素都使用第一个值;**
        * **若以上两个条件都不满足, 则报错, 无法进行运算.**

Example 1:

.. code-block:: python

    # 定义一个3*4的二维数组
    >>> a = np.arange(12).reshape(3, 4)
    >>> a
    array([[ 0,  1,  2,  3],
           [ 4,  5,  6,  7],
           [ 8,  9, 10, 11]])

    # 定义一个1*4的一维数组
    >>> b = np.arange(4)
    >>> b
    array([0, 1, 2, 3])

    # 定义一个2*4的数组
    >>> c = np.arange(8).reshape(2, 4)
    >>> c
    array([[0, 1, 2, 3],
           [4, 5, 6, 7]])

以a, b作为输入数组, 它们的shape分别为(3, 4)和(1, 4), 所以输出数组的shape为: (3, 4). 

    * 数组a的shape和输出数组一样, 无需扩展; 
    * 数组b的第一维的长度和输出数组不一致, 但长度为1, 所以数组b在第一维上进行扩展, 扩展后为:

    .. code-block:: python

        0 1 2 3
        0 1 2 3
        0 1 2 3

之后进行数值运算:

.. code-block:: python

    >>> a + b
    array([[ 0,  2,  4,  6],
           [ 4,  6,  8, 10],
           [ 8, 10, 12, 14]])
    >>> a * b
    array([[ 0,  1,  4,  9],
           [ 0,  5, 12, 21],
           [ 0,  9, 20, 33]])

以a, c作为输入数组, 它们的shape分别为(3, 4)和(2, 4), 所以输出数组的shape为: (3, 4).

    * 数组a的shape和输出数组一致, 无需扩展;
    * 数组c的第一维的长度和输出数组不一致, 其长度又不为1, 所以无法进行运算.

Example 2:

.. code-block:: python

    # 定义一个1*3的数组
    >>> x = np.arange(3)
    >>> x
    array([0, 1, 2])

    # 定义一个4*1的数组
    >>> y = np.arange(4).reshape(4, 1)
    >>> y
    array([[0],
           [1],
           [2],
           [3]])

以x和y作为输入数组, 它们的shape分别为(1, 3)和(4, 1), 所以输出数组的shape为: (4, 3).

    * 数组x在行方向进行扩展, 扩展后为:

    .. code-block:: python

        0 1 2
        0 1 2
        0 1 2
        0 1 2

    * 数组y在列方向进行扩展, 扩展后为:

    .. code-block:: python

        0 0 0
        1 1 1
        2 2 2
        3 3 3

所以, 进行数值运算的结果为:

.. code-block:: python

    >>> a + b
    array([[0, 1, 2],
           [1, 2, 3],
           [2, 3, 4],
           [3, 4, 5]])
    >>> a * b
    array([[0, 0, 0],
           [0, 1, 2],
           [0, 2, 4],
           [0, 3, 6]])

.. note:: 

    不同shape的数组进行数值运算时, 若某一个维度的长度不是1, 那肯定就不能进行运算了.

